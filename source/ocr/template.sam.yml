AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  OCR processing stack for the End-to-End Textract demo; including pre-processing, Textract integration,
  post-processing, human review, UI output/notifications, and process orchestration.
# TODO: Consider splitting out stacks for individual pipeline stages for clarity
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  RekognitionModelArn:
    Description: >-
      ARN of a Rekognition Custom Labels classifier model for pre-processing images. You may leave this blank and
      manually configure via FunctionPreProcess Lambda environment variable later, but all requests will fail at the
      pre-processing stage until it's set up.
    Type: String
    # TODO: Link some other way through Amplify and clear this to empty default
    Default: 'arn:aws:rekognition:us-east-1:077546553367:project/unicorn-gym-custom-label/version/unicorn-gym-custom-label.2020-06-08T13.55.38/1591599339120'
  DefaultHumanFlowArn:
    Description: >-
      ARN of an Amazon A2I workflow for human review of (post-processed) extractions. You may leave this blank and
      manually configure via FunctionStartHumanReview Lambda environment variable later, but all requests deemed to
      require human review will fail at the human review stage until it's set up.
    Type: String
    # TODO: Link some other way through Amplify and clear this to empty default
    Default: ''
  UploadBucketName:
    Description: >-
      (Optional) existing bucket which should be listened to for image uploads. If blank, a new bucket will be created.
    Type: String
    Default: ''
    # Removed the constraint when making the param optional:
    #AllowedPattern: "^[a-zA-Z][a-zA-Z0-9-.]*"
    #ConstraintDescription: Must be a valid S3 bucket name
  CognitoIdentityPoolId:
    Description: >-
      (Optional) existing Cognito identity pool to configure with permissions for progress notifications via IoT Core.
      If omitted, some notification components will not be provisioned.
    Type: String
    Default: ''
  CognitoUserPoolId:
    Description: >-
      (Optional) existing Cognito user pool to listen for new sign-ups and add notification permissions. If omitted,
      new sign-ups will require external/manual permissions configuration.

      TODO: This sign-up monitoring functionality doesn't actually work yet anyway!
    Type: String
    Default: ''
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - Label:
          default: "External Components"
        Parameters:
          - RekognitionModelArn
          - DefaultHumanFlowArn
      - Label:
          default: "(Optional) Input Integration"
        Parameters:
          - UploadBucketName
      - Label:
          default: "(Optional) Output Integration"
        Parameters:
          - CognitoIdentityPoolId
          - CognitoUserPoolId
    # ParameterLabels: We'll leave the labels as just the raw param names
Conditions:
  CreateUploadBucket: !Equals [!Ref UploadBucketName, '']
  AttachToCognito: !Not [!Equals [!Ref CognitoIdentityPoolId, '']]
Resources:

##########  CORE DATA STORES  ##########
  # Destination for uploads from client UI (objects trigger workflow)
  PreprocessTrainingBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Destination for uploads from client UI (objects trigger workflow)
  RawInputBucket:
    Type: AWS::S3::Bucket
    Condition: CreateUploadBucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      # Triggering Step Functions happens via CloudTrail (see below), not NotificationConfiguration here

  # Storage for modified source images (if pre-processing supports this)
  ProcessedInputBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Raw Textract results
  RawOutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # A2I human review loop outputs
  HumanReviewsBucket:
    Type: AWS::S3::Bucket
    # Creating the bucket, the Lambda function, and the Lambda permission creates a circular dependency that
    # we chose to navigate here by relaxing the permissions - but you could instead tackle by explicitly
    # configuring a bucket name:
    # https://aws.amazon.com/premiumsupport/knowledge-center/unable-validate-circular-dependency-cloudformation/
    DependsOn:
      - HumanReviewCallbackPermission
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 7
            Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            # Filter: # TODO: Store outputs under a prefix?
            Function: !GetAtt FunctionHumanReviewCallback.Arn


##########  COMMON TO BE FACTORED OUT  ##########
  # TODO: Scope the various Lambda permissions down
  # In production, we highly recommend you apply the least-privilege principle!
  LambdaAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # If we can avoid naming the roles, we avoid needing an extra CF 'capability'
      #RoleName: !Sub '${ProjectId}-LambdaAdminRole'
      #Path: !Sub '/${ProjectId}/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

##########  PRE-PROCESSING  ##########
  # Give SageMaker Ground Truth and Rekognition Custom Labels access to the Training Bucket
  RekTrainingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PreprocessTrainingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSRekognitionS3AclBucketRead20191011
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action:
              - 's3:GetBucketAcl'
              - 's3:GetBucketLocation'
            Resource: !GetAtt PreprocessTrainingBucket.Arn
          - Sid: AWSRekognitionS3GetBucket20191011
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action:
              - 's3:GetObject'
              - 's3:GetObjectAcl'
              - 's3:GetObjectVersion'
              - 's3:GetObjectTagging'
            Resource: !Sub '${PreprocessTrainingBucket.Arn}/*'
          - Sid: AWSRekognitionS3PutObject20191011
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action:
              - 's3:PutObject'
            Resource: !Sub '${PreprocessTrainingBucket.Arn}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
            
  FunctionPreProcess:
    Type: 'AWS::Serverless::Function'
    Properties:
      #FunctionName: We'll allow to auto-generate instead
      Description: Pre-process an image in S3
      CodeUri: ./preprocessing/fn-preprocess/
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.7
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 30
      Environment:
        Variables:
          # TODO: Parameterize
          LAMBDA_ENHANCED_IMAGE_ARN: 'arn:aws:lambda:us-east-1:077546553367:function:nutchanon-preprocessing:$LATEST'
          REKOGNITION_MODEL_ARN: !Ref RekognitionModelArn
      # Layers:
      #   - !Ref CommonCodeLayer


##########  TEXTRACT OCR  ##########
  FunctionCallTextract:
    Type: 'AWS::Serverless::Function'
    Properties:
      #FunctionName: We'll allow to auto-generate instead'
      Description: Process an artifact with Textract
      CodeUri: ./textract-integration/fn-call-textract/
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.7
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 30
      Environment:
        Variables:
          TEXTRACT_INTEGRATION_TYPE: 'SYNC'
      # Layers:
      #   - !Ref CommonCodeLayer


##########  OCR RESULT POST-PROCESSING  ##########
  FunctionPostProcess:
    Type: 'AWS::Serverless::Function'
    Properties:
      #FunctionName: We'll allow to auto-generate instead
      Description: Post-process Textract results into business-level fields
      CodeUri: ./postprocessing/fn-postprocess/
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.7
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 30
      # Layers:
      #   - !Ref CommonCodeLayer


##########  HUMAN REVIEW  ##########
  FunctionStartHumanReview:
    Type: 'AWS::Serverless::Function'
    Properties:
      #FunctionName: We'll allow to auto-generate instead
      Description: Kick off an A2I human loop
      CodeUri: ./human-review/fn-start-human-review/
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.7
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DEFAULT_FLOW_DEFINITION_ARN: !Ref DefaultHumanFlowArn
      # Layers:
      #   - !Ref CommonCodeLayer

  FunctionHumanReviewCallback:
    Type: 'AWS::Serverless::Function'
    Properties:
      #FunctionName: We'll allow to auto-generate instead
      Description: Process and notify results of a completed human loop
      CodeUri: ./human-review/fn-human-review-callback/
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.7
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 30
      # Environment:
        # Variables:
          # TEXTRACT_INTEGRATION_TYPE: 'SYNC'
      # Layers:
      #   - !Ref CommonCodeLayer

  # Grant permission for the A2I reviews output bucket to trigger the callback Lambda:
  HumanReviewCallbackPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt FunctionHumanReviewCallback.Arn  # Should we use ARN in the other permission too?
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      # Leaving this open to other/unneeded bucket invokations from inside our own AccountId, rather than
      # parameterizing hard-coding the review bucket name to get around the circular dependency which would
      # be a pain for workshops/etc (since bucket names need to be globally unique).
      #SourceArn: !Sub 'arn:aws:s3:::${HumanReviewsBucket}'

  # Create an Amazon SageMaker role in case the deployer wants to follow through any of the SageMaker notebooks:
  SageMakerNotebookRole:
    Type: 'AWS::IAM::Role'
    Properties:
      #RoleName: !Sub '${ProjectId}-ModelAdminRole'
      #Path: !Sub '/${ProjectId}/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: StackS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:ListBucket'
                Resource:
                  - !If [CreateUploadBucket, !GetAtt RawInputBucket.Arn, !Sub 'arn:aws:s3:::${UploadBucketName}']
                  - !GetAtt PreprocessTrainingBucket.Arn
                  - !GetAtt ProcessedInputBucket.Arn
                  - !GetAtt RawOutputBucket.Arn
                  - !GetAtt HumanReviewsBucket.Arn
              - Effect: Allow
                Action:
                  - 's3:DeleteObject'
                  - 's3:GetObject'
                  - 's3:GetObjectAcl'
                  - 's3:GetObjectTagging'
                  - 's3:GetObjectVersion'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                Resource:
                  - !If [CreateUploadBucket, !Sub '${RawInputBucket.Arn}/*', !Sub 'arn:aws:s3:::${UploadBucketName}/*']
                  - !Sub '${PreprocessTrainingBucket.Arn}/*'
                  - !Sub '${ProcessedInputBucket.Arn}/*'
                  - !Sub '${RawOutputBucket.Arn}/*'
                  - !Sub '${HumanReviewsBucket.Arn}/*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'

##########  PROCESS ORCHESTRATION  ##########
  StepFunctionsXRayAccessPolicy:
    # (As created by default in StepFunctions console)
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      # If we can avoid naming the policies, we avoid needing an extra CF 'capability'
      #ManagedPolicyName: !Sub '${ProjectId}-StepFnXRayAccess'
      #Path: !Sub '/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
              - 'xray:GetSamplingRules'
              - 'xray:GetSamplingTargets'
            Resource: '*'

  CloudWatchLogsDeliveryFullAccessPolicy:
    # (As created by default in StepFunctions console)
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      # If we can avoid naming the policies, we avoid needing an extra CF 'capability'
      #ManagedPolicyName: !Sub '${ProjectId}-CWLogsDeliveryFullAccess'
      #Path: !Sub '/${ProjectId}/'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogDelivery'
              - 'logs:GetLogDelivery'
              - 'logs:UpdateLogDelivery'
              - 'logs:DeleteLogDelivery'
              - 'logs:ListLogDeliveries'
              - 'logs:PutResourcePolicy'
              - 'logs:DescribeResourcePolicies'
              - 'logs:DescribeLogGroups'
            Resource: '*'

  StepFunctionAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      # If we can avoid naming the roles, we avoid needing an extra CF 'capability'
      #RoleName: !Sub '${ProjectId}-StepFunctionAdminRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - !Ref StepFunctionsXRayAccessPolicy
        - !Ref CloudWatchLogsDeliveryFullAccessPolicy

  # We'll trigger our push notifications from CloudWatch events, so need to set up SFn logging:
  PipelineLogGroup:
    Type: AWS::Logs::LogGroup
    # Properties:
    #   LogGroupName: # The default naming isn't too bad
    #   RetentionInDays: # 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653

  # The AWS Step Functions state machine that orchestrates the stages of OCR processing:
  PipelineStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      # Omitting name gives PipelineStateMachine-[GARBAGE], which might be nice enough for you but might not!
      Name: !Sub '${AWS::StackName}-PipelineStateMachine'
      DefinitionUri: ./StateMachine.asl.json
      DefinitionSubstitutions:
        FunctionPreProcessArn: !GetAtt FunctionPreProcess.Arn
        FunctionCallTextractArn: !GetAtt FunctionCallTextract.Arn
        FunctionPostProcessArn: !GetAtt FunctionPostProcess.Arn
        FunctionStartHumanReviewName: !Ref FunctionStartHumanReview
        RawOutputBucketName: !Ref RawOutputBucket
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup: 
              LogGroupArn: !GetAtt PipelineLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL  # Needed for push notifications - otherwise could use ERROR, FATAL, OFF (default)
      Role: !GetAtt StepFunctionAdminRole.Arn
      Type: STANDARD


##########  INPUT INTEGRATION (TRIGGERING THE STEP FUNCTION)  ##########
# We'll use S3 trigger to kick off our state machine, but let the state machine handle the rest of the orchestration.
# Note that the workflow could be built-up from point-integrations instead: e.g. each step triggering the next.

  # Triggering a SFn from S3 is a little different to triggering a Lambda (as we do for human review callback) - we
  # need to do it via CloudTrail. First create a CloudTrail log storage bucket and give CloudTrail access to it...
  InputCloudTrailBucket:
    Type: AWS::S3::Bucket

  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InputCloudTrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:GetBucketAcl'
            Resource: !GetAtt InputCloudTrailBucket.Arn
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Sub '${InputCloudTrailBucket.Arn}/*'
            Condition:
              StringEquals:
                's3:x-amz-acl': 'bucket-owner-full-control'

  # ...Then set up CloudTrail logging events from the input bucket to the CloudTrail bucket:
  RawInputTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - LogBucketPolicy
    Properties:
      EventSelectors: 
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - !If [CreateUploadBucket, !Sub '${RawInputBucket.Arn}/', !Sub 'arn:aws:s3:::${UploadBucketName}/']
                #- !Sub '${RawInputBucket.Arn}/'
                #- !Sub 'arn:aws:s3:::${UploadBucketName}/'
          IncludeManagementEvents: false
          ReadWriteType: WriteOnly
      IncludeGlobalServiceEvents: false
      IsLogging: true
      IsMultiRegionTrail: false
      S3BucketName: !Ref InputCloudTrailBucket
      #S3KeyPrefix: Might be useful to scope down?
      #TrailName: Use default

  # Finally create an execution role (with permission to actually start the Step Function) and the rule itself, to
  # start an execution every time an image/object is put in the input bucket.
  AmazonCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        -
          PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: states:StartExecution
                Resource: !Ref PipelineStateMachine

  InputCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
            - CompleteMultipartUpload
          requestParameters:
            bucketName:
              #- !Ref RawInputBucket
              #- !Ref UploadBucketName
              - !If [CreateUploadBucket, !Ref RawInputBucket, !Ref UploadBucketName]
      Targets:
        - Arn: !Ref PipelineStateMachine
          RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
          Id: start-ocr-statemachine


##########  PROGRESS PUSH NOTIFICATIONS  ##########
# Step Functions has great DescribeExecution and GetExecutionHistory APIs for querying the state of an execution, but
# we have some tricky requirements here:
#
# - We'd like to push notifications out, rather than poll
# - Because the SFn execution is started automatically by S3 object upload, the client *doesn't actually know* their
#   Step Functions execution ID
# - We'd like to give authenticated Cognito identities information about *only their own* uploads

  # We'll use a DynamoDB table to track SFn Execution IDs to the Cognito Identities that initiated them:
  TableExecutionOwnership:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      #TableName: Auto-generated
      AttributeDefinitions:
        - AttributeName: ExecutionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: ExecutionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ExpiresAt
        Enabled: true

  # This Lambda function will listen to the CloudWatch Event stream of the Step Functions state machine, and generate
  # IoT notifications on the correct (Cognito Identity-specific) topics.
  FunctionNotifySfnProgress:
    Type: 'AWS::Serverless::Function'
    Properties:
      #FunctionName: We'll allow to auto-generate instead
      Description: Send push notifications when Step Functions log indicates state transition
      CodeUri: ./ui-notifications/fn-notify-progress/
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.7
      Role: !GetAtt LambdaAdminRole.Arn
      Timeout: 30
      Environment:
        Variables:
          EXECUTION_OWNERSHIP_TABLE_NAME: !Ref TableExecutionOwnership
      # Layers:
      #   - !Ref CommonCodeLayer

  NotifySfnProgressPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionNotifySfnProgress
      Principal: !Sub 'logs.${AWS::Region}.amazonaws.com'
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt PipelineLogGroup.Arn

  # Step Functions generate loads of events, so we'll just listen to the significant ones: overall Execution start/stop
  # and entries to a new State (step in the flow).
  SfnProgressSubscriptionFilter:
    Type: 'AWS::Logs::SubscriptionFilter'
    DependsOn:
      - NotifySfnProgressPermission
    Properties:
      DestinationArn: !GetAtt FunctionNotifySfnProgress.Arn
      # See the list at https://docs.aws.amazon.com/step-functions/latest/apireference/API_HistoryEvent.html
      FilterPattern: >-
        { $.type="ChoiceStateEntered" || $.type="ExecutionAborted" || $.type="ExecutionFailed" || 
        $.type="ExecutionStarted" || $.type="ExecutionSucceeded" || $.type="ExecutionTimedOut" ||
        $.type="FailStateEntered" || $.type="MapStateEntered" || $.type="ParallelStateEntered" ||
        $.type="PassStateEntered" || $.type="SucceedStateEntered" || $.type="TaskStateEntered" ||
        $.type="WaitStateEntered" }
      LogGroupName: !Ref PipelineLogGroup
      #RoleArn:  # Not needed for Lambda function destinations

##########  ACCESS CONTROL FOR PROGRESS PUSH NOTIFICATIONS  ##########

  # Every Cognito identity (i.e. user) needs to be specifically added as a principal to an IoT access policy:
  AmplifyIoTAccessPolicy:
    Type: 'AWS::IoT::Policy'
    Condition: AttachToCognito
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'iot:Connect'
            # ${!...} is an escape so CloudFormation leaves ${iot:ClientId} to be interpreted by IoT. See:
            # https://docs.aws.amazon.com/iot/latest/developerguide/basic-policy-variables.html and
            # https://docs.aws.amazon.com/iot/latest/developerguide/pub-sub-policy.html
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/${!cognito-identity.amazonaws.com:sub}'
          - Effect: Allow
            Action: 'iot:Subscribe'
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/private/${!cognito-identity.amazonaws.com:sub}'
          - Effect: Allow
            Action: 'iot:Receive'
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/private/${!cognito-identity.amazonaws.com:sub}'

  # This Lambda will double as both a CloudFormation Custom Resource (to set up permissions for existing identities on
  # stack create/update/delete) and a callable Lambda to configure the permissions for a new identity.
  FunctionSetUpIotAuth:
    Type: 'AWS::Serverless::Function'
    Condition: AttachToCognito
    Properties:
      #FunctionName: We'll allow to auto-generate instead
      Description: Attach IoT PubSub policies to Cognito users and authenticated roles
      CodeUri: ./ui-notifications/fn-setup-iot-auth/
      Handler: main.handler
      MemorySize: 256
      Runtime: python3.7
      Role: !GetAtt LambdaAdminRole.Arn
      # Long timeout for CloudFormation resource setup, but note that Cognito Lambda triggers must respond within 5sec!
      Timeout: 30
      Environment:
        Variables:
          IOT_ACCESS_POLICY_NAME: !Ref AmplifyIoTAccessPolicy
          COGNITO_IDENTITY_POOL_ID: !Ref CognitoIdentityPoolId
      # Layers:
      #   - !Ref CommonCodeLayer

  # Use FunctionSetUpIotAuth to:
  # - Attach all identities in the pool to AmplifyIoTAccessPolicy
  # - Set up a trigger to reconcile permissions whenever a user logs in
  AuthorizeUsersForPubSub:
    Type: 'Custom::SetUpIotAuth'
    Condition: AttachToCognito
    Version: '2.0.0'
    Properties:
      ServiceToken: !GetAtt FunctionSetUpIotAuth.Arn
      CognitoIdentityPoolId: !Ref CognitoIdentityPoolId
      CognitoUserPoolId: !Ref CognitoUserPoolId
      # We pass this in as *both* a CF resource param and a Lambda env var because the Lambda function may need the
      # information for other invokations besides CF, but for edge-case CF calls (e.g. update stack) the resource prop
      # should be authoritative:
      IotAccessPolicyName: !Ref AmplifyIoTAccessPolicy

  CognitoTriggerLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Condition: AttachToCognito
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt FunctionSetUpIotAuth.Arn
      Principal: cognito-idp.amazonaws.com
      #SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}'

Outputs:
  InputBucketName:
    Description: Input bucket to upload images for OCR
    Value: !If [CreateUploadBucket, !Ref RawInputBucket, !Ref UploadBucketName]
  PreprocessTrainingBucketName:
    Description: Bucket to store pre-processing training data in
    Value: !Ref PreprocessTrainingBucket
